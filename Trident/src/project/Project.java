package project;

import java.io.*;
import blib.util.*;
import java.util.ArrayList;
import blib.bson.*;
public class Project {

    public static String[] projRegistry = null;
    
    public String name;
    public ArrayList<Scene> loadedScenes = new ArrayList<Scene>();
    public Scene currentScene = new Scene("Empty Scene");

    public Project(int proj){ // Load from file
        name = projRegistry[proj];
        setupScenes();
        currentScene = loadedScenes.get(0);
    }
    public Project(String name){ // New project

        this.name = name;

        // Make directories
        File dir = new File("data/projects/" + name + "/src/trident/ent");
        dir.mkdirs();
        dir = new File("data/projects/" + name + "/src/update");
        dir.mkdirs();
        dir = new File("data/projects/" + name + "/src/ent");
        dir.mkdirs();
        dir = new File("data/projects/" + name + "/src/custom");
        dir.mkdirs();
        dir = new File("data/projects/" + name + "/lib");
        dir.mkdirs();
        dir = new File("data/projects/" + name + "/data/images/player");
        dir.mkdirs();
        dir = new File("data/projects/" + name + "/data/images/trident");
        dir.mkdirs();
        dir = new File("data/projects/" + name + "/data/scenes");
        dir.mkdirs();

        // Copy files (images and the such)
        BTools.copyFile(new File("data/BLib.jar"), new File("data/projects/" + name + "/lib/BLib.jar"));
        BTools.copyFile(new File("data/images/trident/box.png"), new File("data/projects/" + name + "/data/images/trident/box.png"));
        BTools.copyFile(new File("data/images/trident/boxColl.png"), new File("data/projects/" + name + "/data/images/trident/boxColl.png"));
        BTools.copyFile(new File("data/images/trident/collision.png"), new File("data/projects/" + name + "/data/images/trident/collision.png"));
        BTools.copyFile(new File("data/images/trident/customEnt.png"), new File("data/projects/" + name + "/data/images/trident/customEnt.png"));
        BTools.copyFile(new File("data/images/trident/plrStart.png"), new File("data/projects/" + name + "/data/images/trident/plrStart.png"));
        BTools.copyFile(new File("data/images/trident/trigger.png"), new File("data/projects/" + name + "/data/images/trident/trigger.png"));
        BTools.copyFile(new File("data/icon.png"), new File("data/projects/" + name + "/data/icon.png"));
        BTools.copyFile(new File("data/images/player/idleS.png"), new File("data/projects/" + name + "/data/images/player/idleS.png"));
        BTools.copyFile(new File("data/images/player/idleN.png"), new File("data/projects/" + name + "/data/images/player/idleN.png"));
        BTools.copyFile(new File("data/images/player/idleW.png"), new File("data/projects/" + name + "/data/images/player/idleW.png"));
        BTools.copyFile(new File("data/images/player/idleE.png"), new File("data/projects/" + name + "/data/images/player/idleE.png"));
        BTools.copyFile(new File("data/images/player/walkS.png"), new File("data/projects/" + name + "/data/images/player/walkS.png"));
        BTools.copyFile(new File("data/images/player/walkN.png"), new File("data/projects/" + name + "/data/images/player/walkN.png"));
        BTools.copyFile(new File("data/images/player/walkE.png"), new File("data/projects/" + name + "/data/images/player/walkE.png"));
        BTools.copyFile(new File("data/images/player/walkW.png"), new File("data/projects/" + name + "/data/images/player/walkW.png"));

        // Write files (source files & bson files)

        // src/trident
        try{
            File file = new File("data/projects/" + name + "/src/trident/Main.java");
            file.createNewFile();
            PrintWriter writer = new PrintWriter(file);
            writer.println("package trident;");
            writer.println("");
            writer.println("import javax.swing.*;");
            writer.println("import java.awt.*;");
            writer.println("public class Main{");
            writer.println("    protected static JFrame window = new JFrame(\"Trident Game\");");
            writer.println("    public static void main(String[] args){");
            writer.println("        window.setSize(700, 500);");
            writer.println("        window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);");
            writer.println("        window.setMinimumSize(new Dimension(700, 500));");
            writer.println("        window.setIconImage(new ImageIcon(\"data/icon.png\").getImage());");
            writer.println("        // panel");
            writer.println("        MainPanel panel = new MainPanel();");
            writer.println("        window.add(panel);");
            writer.println("        //");
            writer.println("        window.setVisible(true);");
            writer.println("    }");
            writer.println("}");
            writer.close();
        }catch(Exception e){}
        try{
            File file = new File("data/projects/" + name + "/src/trident/MainPanel.java");
            file.createNewFile();
            PrintWriter writer = new PrintWriter(file);
            writer.println("package trident;");
            writer.println("");
            writer.println("import javax.swing.*;");
            writer.println("import java.awt.*;");
            writer.println("import blib.game.*;");
            writer.println("import blib.util.*;");
            writer.println("import java.awt.event.*;");
            writer.println("import blib.input.*;");
            writer.println("import java.util.ArrayList;");
            writer.println("");
            writer.println("import trident.ent.*;");
            writer.println("import update.*;");
            writer.println("public class MainPanel extends JPanel {");
            writer.println("");
            writer.println("    protected FrameManager frameManager = new FrameManager();");
            writer.println("    protected Server server;");
            writer.println("    protected KeyManager km = new InputListener(this);");
            writer.println("    ");
            writer.println("    public MainPanel(){");
            writer.println("        setBackground(Color.black);");
            writer.println("");
            writer.println("        Trident.player = new Player(new Position(), km, 0.1, this, \"data/images/player\", 16, 16);");
            writer.println("        Trident.player.camera.setDimension = new Dimension(frameManager.WIDTH, frameManager.HEIGHT);");
            writer.println("        Trident.player.resizeImages(32, 32);");
            writer.println("        Trident.currentScene = new Scene(\"Test Scene\");");
            writer.println("");
            writer.println("        Trident.addCustomEntity(new BoxColl());");
            writer.println("        Trident.addCustomEntity(new BoxNoColl());");
            writer.println("        Trident.addCustomEntity(new InvisColl());");
            writer.println("        Trident.addCustomEntity(new PlrStart());");
            writer.println("        Trident.addCustomEntity(new Trigger());");
            writer.println("");
            writer.println("        Update.setup();");
            writer.println("");
            writer.println("        Trident.setupScenes();");
            writer.println("");
            writer.println("        Trident.loadScene(Trident.defaultScene);");
            writer.println("");
            writer.println("        server = new Server(new ServerListener());");
            writer.println("    }");
            writer.println("");
            writer.println("    public void paintComponent(Graphics graphics){");
            writer.println("        super.paintComponent(graphics);");
            writer.println("        Graphics g = frameManager.newFrame();");
            writer.println("");
            writer.println("        if(Trident.engineDraw){");
            writer.println("            for(TridEntity e: Trident.currentScene.entities){");
            writer.println("                Point p = Trident.player.camera.worldToScreen(e.position);");
            writer.println("                e.engineRender(g, this, p.x, p.y);");
            writer.println("            }");
            writer.println("        }");
            writer.println("");
            writer.println("        ArrayList<ArrayList<Entity>> splitEnt = Trident.player.camera.splitEntities(Trident.tridArrToEntArr(Trident.currentScene.entities), 16);");
            writer.println("        if(!Trident.engineDraw) Trident.player.camera.render(g, splitEnt.get(0));");
            writer.println("        if(Trident.drawPlayer){");
            writer.println("            Trident.player.render(this, g, frameManager.WIDTH / 2 - 16, frameManager.HEIGHT / 2 - 16);");
            writer.println("        }");
            writer.println("        if(!Trident.engineDraw) Trident.player.camera.render(g, splitEnt.get(1));");
            writer.println("");
            writer.println("        if(Trident.drawCollision){");
            writer.println("            g.setColor(Color.red);");
            writer.println("            ArrayList<Rectangle> collision = Trident.currentScene.getCollision();");
            writer.println("            collision.add(Trident.player.getCollision());");
            writer.println("            for(Rectangle r: collision){");
            writer.println("                Point p = Trident.player.camera.worldToScreen(new Position(r.x, r.y));");
            writer.println("                g.drawRect(p.x, p.y, r.width, r.height);");
            writer.println("                g.drawLine(p.x, p.y, p.x + r.width, p.y + r.height);");
            writer.println("            }");
            writer.println("        }");
            writer.println("");
            writer.println("        if(Trident.drawPos){");
            writer.println("            g.setColor(Trident.debugColor);");
            writer.println("            g.setFont(new Font(\"Arial\", Font.ITALIC, 10));");
            writer.println("            TextBox.draw(Trident.player.getPos().toStringSimple(), g, 10, 30);");
            writer.println("        }");
            writer.println("        ");
            writer.println("        frameManager.renderFrame(this, graphics);");
            writer.println("    }");
            writer.println("");
            writer.println("");
            writer.println("    private class InputListener extends InputAdapter {");
            writer.println("        public InputListener(JPanel panel){");
            writer.println("            super(panel);");
            writer.println("        }");
            writer.println("");
            writer.println("        public void onKeyPressed(int key){");
            writer.println("            if(key == KeyEvent.VK_F11){");
            writer.println("                Trident.fullscreen = !Trident.fullscreen;");
            writer.println("                Main.window = BTools.getWindowFullscreen(Main.window, Trident.fullscreen, panel);");
            writer.println("                return;");
            writer.println("            }");
            writer.println("            Inputs.keyPressed(key);");
            writer.println("        }");
            writer.println("");
            writer.println("        public void onMousePressed(int mb, Point mousePos){");
            writer.println("            mousePos = frameManager.getMousePos(panel, mousePos);");
            writer.println("            Position worldPos = Trident.player.camera.mouseToPos(mousePos);");
            writer.println("            Inputs.mousePressed(mb, mousePos, worldPos);");
            writer.println("        }");
            writer.println("    }");
            writer.println("");
            writer.println("    private class ServerListener implements ActionListener {");
            writer.println("        public void actionPerformed(ActionEvent event){");
            writer.println("            Trident.mousePos = km.getMousePos();");
            writer.println("            Trident.mouseDelta = km.getMouseDelta();");
            writer.println("");
            writer.println("            frameManager.bgColor = Trident.bgColor;");
            writer.println("");
            writer.println("            if(!Trident.noclip) Trident.player.updateWithCollision(server.getElapsedTime(), Trident.currentScene.getCollision());");
            writer.println("            else Trident.player.update(server.getElapsedTime());");
            writer.println("");
            writer.println("            for(int i = 0; i < Trident.getEntities().size(); i++){");
            writer.println("                TridEntity e = Trident.getEntities().get(i);");
            writer.println("                e.update(server.getElapsedTime());");
            writer.println("                if(e instanceof Trigger){");
            writer.println("                    Trigger trig = (Trigger)e;");
            writer.println("                    if(trig.containsPos(Trident.player.getPos())){");
            writer.println("                        Update.trigger(trig.id);");
            writer.println("                    }");
            writer.println("                }");
            writer.println("            }");
            writer.println("");
            writer.println("            Update.update(server.getElapsedTime());");
            writer.println("");
            writer.println("            repaint();");
            writer.println("        }");
            writer.println("    }");
            writer.println("}");
            writer.close();
        }catch(Exception e){}
        try{
            File file = new File("data/projects/" + name + "/src/trident/Scene.java");
            file.createNewFile();
            PrintWriter writer = new PrintWriter(file);
            writer.println("package trident;");
            writer.println("");
            writer.println("import java.util.ArrayList;");
            writer.println("import java.awt.*;");
            writer.println("import java.io.*;");
            writer.println("import blib.bson.*;");
            writer.println("import blib.util.*;");
            writer.println("import trident.ent.*;");
            writer.println("import blib.game.*;");
            writer.println("public class Scene {");
            writer.println("    ");
            writer.println("    public final String name;");
            writer.println("    public ArrayList<TridEntity> entities;");
            writer.println("    protected Position plrStart = new Position();");
            writer.println("    protected int plrDir = Player.SOUTH;");
            writer.println("");
            writer.println("    public Scene(String n){ // Empty scene");
            writer.println("        name = n;");
            writer.println("        entities = new ArrayList<TridEntity>();");
            writer.println("    }");
            writer.println("    public Scene(File f) throws IOException{");
            writer.println("        entities = new ArrayList<TridEntity>();");
            writer.println("        ArrayList<BSonObject> objects = BSonParser.readFile(f.getAbsolutePath());");
            writer.println("        BSonObject obj = BSonParser.getObject(\"name\", objects);");
            writer.println("        name = obj.getString();");
            writer.println("        obj = BSonParser.getObject(\"dir\", objects);");
            writer.println("        if(obj != null){");
            writer.println("            String str = obj.getString();");
            writer.println("            if(str.equals(\"west\")) plrDir = Player.WEST;");
            writer.println("            if(str.equals(\"north\")) plrDir = Player.NORTH;");
            writer.println("            if(str.equals(\"east\")) plrDir = Player.EAST;");
            writer.println("        }");
            writer.println("        obj = BSonParser.getObject(\"entities\", objects);");
            writer.println("        BSonList asList = (BSonList)obj;");
            writer.println("        for(int i = 0; i < asList.list.size(); i++){");
            writer.println("            String objName = asList.list.get(i).getString();");
            writer.println("            i++;");
            writer.println("            boolean foundEnt = false;");
            writer.println("            for(TridEntity e: Trident.entRegistry){");
            writer.println("                if(e.name.equals(objName)){");
            writer.println("                    double x, y;");
            writer.println("                    x = asList.list.get(i).getDouble();");
            writer.println("                    i++;");
            writer.println("                    y = asList.list.get(i).getDouble();");
            writer.println("                    i++;");
            writer.println("                    int w = 0, h = 0;");
            writer.println("                    i++;");
            writer.println("                    if(e.HASCOLLISION){");
            writer.println("                        w = asList.list.get(i).getInt();");
            writer.println("                        i++;");
            writer.println("                        h = asList.list.get(i).getInt();");
            writer.println("                        i++;");
            writer.println("                    }");
            writer.println("                    int[] data = new int[e.numData];");
            writer.println("                    for(int j = 0; j < e.numData; j++){");
            writer.println("                        data[j] = asList.list.get(i).getInt();");
            writer.println("                        i++;");
            writer.println("                    }");
            writer.println("                    i--;");
            writer.println("                    entities.add(e.construct(new Position(x, y), (e.HASCOLLISION ? (new Dimension(w, h)) : null), data));");
            writer.println("                    foundEnt = true;");
            writer.println("                    break;");
            writer.println("                }");
            writer.println("            }");
            writer.println("            if(!foundEnt) System.out.println(\"ERROR: no entity type '\" + objName + \"' found\");");
            writer.println("        }");
            writer.println("");
            writer.println("        // Check for plrstart");
            writer.println("        for(TridEntity e: entities){");
            writer.println("            if(e instanceof PlrStart){");
            writer.println("                plrStart = e.position.copy();");
            writer.println("                break;");
            writer.println("            }");
            writer.println("        }");
            writer.println("    }");
            writer.println("");
            writer.println("    public static Scene loadScene(String path){ // stub method ::: Load a scene from a file");
            writer.println("        return null;");
            writer.println("    }");
            writer.println("");
            writer.println("    public ArrayList<Rectangle> getCollision(){");
            writer.println("        ArrayList<Rectangle> collision = new ArrayList<Rectangle>();");
            writer.println("        for(TridEntity e: entities){");
            writer.println("            if(e.HASCOLLISION){");
            writer.println("                collision.add(e.getCollision());");
            writer.println("            }");
            writer.println("        }");
            writer.println("");
            writer.println("        return collision;");
            writer.println("    }");
            writer.println("");
            writer.println("}");
            writer.close();
        }catch(Exception e){}
        try{
            File file = new File("data/projects/" + name + "/src/trident/Trident.java");
            file.createNewFile();
            PrintWriter writer = new PrintWriter(file);
            writer.println("package trident;");
            writer.println("");
            writer.println("import blib.game.*;");
            writer.println("import blib.util.*;");
            writer.println("import java.awt.*;");
            writer.println("import java.util.ArrayList;");
            writer.println("");
            writer.println("import update.*;");
            writer.println("import java.io.*;");
            writer.println("public class Trident {");
            writer.println("");
            writer.println("    // Debug Settings");
            writer.println("    public static boolean drawPos = false;");
            writer.println("    public static boolean drawCollision = false;");
            writer.println("    public static boolean noclip = false;");
            writer.println("    public static boolean engineDraw = false;");
            writer.println("    public static Color debugColor = Color.red;");
            writer.println("    ");
            writer.println("    // Public Variables");
            writer.println("    public static Point mousePos;");
            writer.println("    public static Point mouseDelta;");
            writer.println("    public static boolean drawPlayer = true;");
            writer.println("");
            writer.println("");
            writer.println("    // Trident Variables");
            writer.println("    protected static Player player;");
            writer.println("    protected static Color bgColor;");
            writer.println("    protected static Scene currentScene;");
            writer.println("    protected static boolean fullscreen = false;");
            writer.println("    protected static ArrayList<Scene> loadedScenes = new ArrayList<Scene>();");
            writer.println("    protected static ArrayList<TridEntity> entRegistry = new ArrayList<TridEntity>();");
            writer.println("    protected static String defaultScene = \"default\";");
            writer.println("");
            writer.println("");
            writer.println("    // Setting methods");
            writer.println("    public static void setPlrSpeed(double speed){");
            writer.println("        player.speed = speed;");
            writer.println("    }");
            writer.println("    public static void setBackground(Color color){");
            writer.println("        bgColor = color;");
            writer.println("    }");
            writer.println("    public static void setPlrPos(Position pos){");
            writer.println("        player.goToPos(pos);");
            writer.println("    }");
            writer.println("    public static void setShortCollision(boolean b){");
            writer.println("        player.shortCollision = b;");
            writer.println("    }");
            writer.println("    public static void setWindowTitle(String title){");
            writer.println("        Main.window.setTitle(title);");
            writer.println("    }");
            writer.println("    public static void setupScenes(){");
            writer.println("        try{");
            writer.println("            loadedScenes = new ArrayList<Scene>();");
            writer.println("            File dir = new File(\"data/scenes\");");
            writer.println("            File[] files = dir.listFiles();");
            writer.println("            ArrayList<File> sceneFiles = new ArrayList<File>();");
            writer.println("            for(File f: files){");
            writer.println("                if(BTools.hasExtension(f, \"bson\")) sceneFiles.add(f);");
            writer.println("            }");
            writer.println("");
            writer.println("            for(File f: sceneFiles){");
            writer.println("                loadedScenes.add(new Scene(f));");
            writer.println("            }");
            writer.println("        }catch(Exception e){");
            writer.println("            System.out.println(\"Error setting up scenes.\");");
            writer.println("            e.printStackTrace();");
            writer.println("        }");
            writer.println("        ");
            writer.println("    }");
            writer.println("    public static void loadScene(String name){");
            writer.println("        for(Scene s: loadedScenes){");
            writer.println("            if(s.name.equals(name)){");
            writer.println("                currentScene = s;");
            writer.println("                player.goToPos(s.plrStart);");
            writer.println("                player.setDirection(s.plrDir);");
            writer.println("                Update.sceneStart(name);");
            writer.println("                return;");
            writer.println("            }");
            writer.println("        }");
            writer.println("        System.out.println(\"***********************************************************************************\");");
            writer.println("        System.out.println(\"Error loading scene: No scene with name '\" + name + \"' found.\");");
            writer.println("        System.out.println(\"***********************************************************************************\");");
            writer.println("    }");
            writer.println("    public static void addCustomEntity(TridEntity e){ // Add a cutsom entity to the registry");
            writer.println("        entRegistry.add(e);");
            writer.println("    }");
            writer.println("    public static void spawnEntity(TridEntity e){");
            writer.println("        currentScene.entities.add(e);");
            writer.println("    }");
            writer.println("    public static void setDefaultScene(String s){");
            writer.println("        defaultScene = s;");
            writer.println("    }");
            writer.println("    public static void destroy(TridEntity object){");
            writer.println("        getEntities().remove(object);");
            writer.println("    }");
            writer.println("");
            writer.println("    // Getting methods");
            writer.println("    public static double getPlrSpeed(){");
            writer.println("        return player.speed;");
            writer.println("    }");
            writer.println("    public static Position getPlrPos(){");
            writer.println("        return player.getPos().copy();");
            writer.println("    }");
            writer.println("    public static Scene getCurrentScene(){");
            writer.println("        return currentScene;");
            writer.println("    }");
            writer.println("    public static boolean getFullscreen(){");
            writer.println("        return fullscreen; ");
            writer.println("    }");
            writer.println("    public static ArrayList<Entity> tridArrToEntArr(ArrayList<TridEntity> entities){");
            writer.println("        ArrayList<Entity> newEntities = new ArrayList<Entity>();");
            writer.println("        for(TridEntity e: entities){");
            writer.println("            newEntities.add((Entity)e);");
            writer.println("        }");
            writer.println("        return newEntities;");
            writer.println("    }");
            writer.println("    public static ArrayList<TridEntity> entArrToTridArr(ArrayList<Entity> entities){");
            writer.println("        ArrayList<TridEntity> newEntities = new ArrayList<TridEntity>();");
            writer.println("        for(Entity e: entities){");
            writer.println("            newEntities.add((TridEntity)e);");
            writer.println("        }");
            writer.println("        return newEntities;");
            writer.println("    }");
            writer.println("    public static ArrayList<TridEntity> getEntities(){");
            writer.println("        return currentScene.entities;");
            writer.println("    }");
            writer.println("    public static ArrayList<Rectangle> getCollision(){");
            writer.println("        return currentScene.getCollision();");
            writer.println("    }");
            writer.println("");
            writer.println("}");
            writer.close();
        }catch(Exception e){}
        try{
            File file = new File("data/projects/" + name + "/src/trident/TridEntity.java");
            file.createNewFile();
            PrintWriter writer = new PrintWriter(file);
            writer.println("package trident;");
            writer.println("");
            writer.println("import blib.game.*;");
            writer.println("import blib.util.*;");
            writer.println("");
            writer.println("import javax.swing.*;");
            writer.println("import java.awt.*;");
            writer.println("public class TridEntity extends Entity {");
            writer.println("");
            writer.println("    public final boolean HASCOLLISION;");
            writer.println("    private final Dimension collision;");
            writer.println("    public String engineRenderData = \"\";");
            writer.println("    private ImageIcon engineImg = new ImageIcon(\"data/images/trident/customEnt.png\");");
            writer.println("    protected String name;");
            writer.println("    protected int numData;");
            writer.println("    ");
            writer.println("    public TridEntity(Position pos){");
            writer.println("        super(pos);");
            writer.println("        HASCOLLISION = false;");
            writer.println("        collision = null;");
            writer.println("    }");
            writer.println("    public TridEntity(Position pos, Dimension collision){");
            writer.println("        super(pos);");
            writer.println("        if(collision.equals(new Dimension(0, 0))) HASCOLLISION = false;");
            writer.println("        else HASCOLLISION = true;");
            writer.println("        this.collision = collision;");
            writer.println("    }");
            writer.println("    public TridEntity(String n, boolean hasColl, int numData){");
            writer.println("        super(new Position());");
            writer.println("        HASCOLLISION = hasColl;");
            writer.println("        collision = null;");
            writer.println("        name = n;");
            writer.println("        this.numData = numData;");
            writer.println("    }");
            writer.println("    public TridEntity construct(Position pos, Dimension collision, int[] data){");
            writer.println("        System.out.println(\"Error: tried to create an empty entity\");");
            writer.println("        return null;");
            writer.println("    }");
            writer.println("");
            writer.println("    public final Rectangle getCollision(){");
            writer.println("        return new Rectangle((int)position.x - (collision.width / 2), (int)position.y - (collision.height / 2), collision.width, collision.height);");
            writer.println("    }");
            writer.println("    ");
            writer.println("    public void render(Graphics g, JPanel panel, int x, int y){");
            writer.println("");
            writer.println("    }");
            writer.println("");
            writer.println("    protected void engineRender(Graphics g, JPanel panel, int x, int y){");
            writer.println("        if(HASCOLLISION){");
            writer.println("            g.setColor(Color.red);");
            writer.println("            g.drawRect(x - getCollision().width / 2, y - getCollision().height / 2, getCollision().width, getCollision().height);");
            writer.println("            g.drawLine(x - getCollision().width / 2, y - getCollision().height / 2, x + getCollision().width / 2, y + getCollision().height / 2);");
            writer.println("        }");
            writer.println("        engineImg.paintIcon(panel, g, x - engineImg.getIconWidth() / 2, y - engineImg.getIconHeight() / 2);");
            writer.println("    }");
            writer.println("");
            writer.println("    public void update(long elapsedTime){");
            writer.println("");
            writer.println("    }");
            writer.println("");
            writer.println("}");
            writer.close();
        }catch(Exception e){}
        
        
        // src/trident/ent
        try{
            File file = new File("data/projects/" + name + "/src/trident/ent/BoxColl.java");
            file.createNewFile();
            PrintWriter writer = new PrintWriter(file);
            writer.println("package trident.ent;");
            writer.println("");
            writer.println("import blib.util.*;");
            writer.println("import java.awt.*;");
            writer.println("import javax.swing.*;");
            writer.println("");
            writer.println("import trident.*;");
            writer.println("public class BoxColl extends TridEntity{");
            writer.println("");
            writer.println("    public Color color = Color.white;");
            writer.println("");
            writer.println("    private ImageIcon engineImg = new ImageIcon(\"data/images/trident/boxColl.png\");");
            writer.println("    ");
            writer.println("    public BoxColl(Position pos, Dimension size, Color c){");
            writer.println("        super(pos, size);");
            writer.println("        color = c;");
            writer.println("    }");
            writer.println("    public BoxColl(Position pos, Dimension size){");
            writer.println("        super(pos, size);");
            writer.println("    }");
            writer.println("    public BoxColl(){");
            writer.println("        super(\"boxcoll\", true, 3);");
            writer.println("    }");
            writer.println("    public TridEntity construct(Position pos, Dimension collision, int[] data){");
            writer.println("        return new BoxColl(pos, collision, new Color(data[0], data[1], data[2]));");
            writer.println("    }");
            writer.println("");
            writer.println("    public void render(Graphics g, JPanel panel, int x, int y){");
            writer.println("        g.setColor(color);");
            writer.println("        g.fillRect(x - getCollision().width / 2, y - getCollision().height / 2, getCollision().width, getCollision().height);");
            writer.println("    }");
            writer.println("");
            writer.println("    public void engineRender(Graphics g, JPanel panel, int x, int y){");
            writer.println("        render(g, panel, x, y);");
            writer.println("        engineImg.paintIcon(panel, g, x - engineImg.getIconWidth() / 2, y - engineImg.getIconHeight() / 2);");
            writer.println("    }");
            writer.println("}");
            writer.close();
        }catch(Exception e){}
        try{
            File file = new File("data/projects/" + name + "/src/trident/ent/BoxNoColl.java");
            file.createNewFile();
            PrintWriter writer = new PrintWriter(file);
            writer.println("package trident.ent;");
            writer.println("");
            writer.println("import blib.util.*;");
            writer.println("import java.awt.*;");
            writer.println("import javax.swing.*;");
            writer.println("import blib.game.*;");
            writer.println("");
            writer.println("import trident.*;");
            writer.println("public class BoxNoColl extends TridEntity{");
            writer.println("    ");
            writer.println("    public Color color = Color.white;");
            writer.println("    public int width, height;");
            writer.println("");
            writer.println("    private ImageIcon engineImg = new ImageIcon(\"data/images/trident/box.png\");");
            writer.println("    ");
            writer.println("    public BoxNoColl(Position pos, Color c, int w, int h){");
            writer.println("        super(pos);");
            writer.println("        color = c;");
            writer.println("        width = w;");
            writer.println("        height = h;");
            writer.println("        renderType = Entity.UNDER;");
            writer.println("    }");
            writer.println("    public BoxNoColl(Position pos, int w, int h){");
            writer.println("        super(pos);");
            writer.println("        width = w;");
            writer.println("        height = h;");
            writer.println("        renderType = Entity.UNDER;");
            writer.println("    }");
            writer.println("    public BoxNoColl(){");
            writer.println("        super(\"boxnocoll\", false, 5);");
            writer.println("    }");
            writer.println("    public TridEntity construct(Position pos, Dimension collision, int[] data){");
            writer.println("        return new BoxNoColl(pos, new Color(data[2], data[3], data[4]), data[0], data[1]);");
            writer.println("    }");
            writer.println("");
            writer.println("    public void render(Graphics g, JPanel panel, int x, int y){");
            writer.println("        g.setColor(color);");
            writer.println("        g.fillRect(x - width / 2, y - height / 2, width, height);");
            writer.println("    }");
            writer.println("");
            writer.println("    public void engineRender(Graphics g, JPanel panel, int x, int y){");
            writer.println("        render(g, panel, x, y);");
            writer.println("        engineImg.paintIcon(panel, g, x - engineImg.getIconWidth() / 2, y - engineImg.getIconHeight() / 2);");
            writer.println("    }");
            writer.println("}");
            writer.close();
        }catch(Exception e){}
        try{
            File file = new File("data/projects/" + name + "/src/trident/ent/InvisColl.java");
            file.createNewFile();
            PrintWriter writer = new PrintWriter(file);
            writer.println("package trident.ent;");
            writer.println("");
            writer.println("import blib.util.*;");
            writer.println("import java.awt.*;");
            writer.println("import javax.swing.*;");
            writer.println("");
            writer.println("import trident.*;");
            writer.println("public class InvisColl extends TridEntity{");
            writer.println("    ");
            writer.println("    public Color color = Color.red;");
            writer.println("");
            writer.println("    private ImageIcon engineImg = new ImageIcon(\"data/images/trident/collision.png\");");
            writer.println("    ");
            writer.println("    public InvisColl(Position pos, Dimension size){");
            writer.println("        super(pos, size);");
            writer.println("    }   ");
            writer.println("    public InvisColl(){");
            writer.println("        super(\"inviscoll\", true, 0);");
            writer.println("    }");
            writer.println("    public TridEntity construct(Position pos, Dimension collision, int[] data){");
            writer.println("        return new InvisColl(pos, collision);");
            writer.println("    }");
            writer.println("");
            writer.println("    public void engineRender(Graphics g, JPanel panel, int x, int y){");
            writer.println("        g.setColor(color);");
            writer.println("        g.drawRect(x - getCollision().width / 2, y - getCollision().height / 2, getCollision().width, getCollision().height);");
            writer.println("        g.drawLine(x - getCollision().width / 2, y - getCollision().height / 2, x + getCollision().width / 2, y + getCollision().height / 2);");
            writer.println("        engineImg.paintIcon(panel, g, x - engineImg.getIconWidth() / 2, y - engineImg.getIconHeight() / 2);");
            writer.println("    }");
            writer.println("}");
            writer.close();
        }catch(Exception e){}
        try{
            File file = new File("data/projects/" + name + "/src/trident/ent/PlrStart.java");
            file.createNewFile();
            PrintWriter writer = new PrintWriter(file);
            writer.println("package trident.ent;");
            writer.println("");
            writer.println("import blib.util.*;");
            writer.println("import java.awt.*;");
            writer.println("import javax.swing.*;");
            writer.println("");
            writer.println("import trident.*;");
            writer.println("public class PlrStart extends TridEntity{");
            writer.println("    public Color color = Color.red;");
            writer.println("");
            writer.println("    private ImageIcon engineImg = new ImageIcon(\"data/images/trident/plrStart.png\");");
            writer.println("    ");
            writer.println("    public PlrStart(Position pos){");
            writer.println("        super(pos);");
            writer.println("    }   ");
            writer.println("    public PlrStart(){");
            writer.println("        super(\"plrstart\", false, 0);");
            writer.println("    }");
            writer.println("    public TridEntity construct(Position pos, Dimension collision, int[] data){");
            writer.println("        return new PlrStart(pos);");
            writer.println("    }");
            writer.println("");
            writer.println("    public void engineRender(Graphics g, JPanel panel, int x, int y){");
            writer.println("        engineImg.paintIcon(panel, g, x - engineImg.getIconWidth() / 2, y - engineImg.getIconHeight() / 2);");
            writer.println("    }");
            writer.println("}");
            writer.close();
        }catch(Exception e){}
        try{
            File file = new File("data/projects/" + name + "/src/trident/ent/Trigger.java");
            file.createNewFile();
            PrintWriter writer = new PrintWriter(file);
            writer.println("package trident.ent;");
            writer.println("");
            writer.println("import blib.util.*;");
            writer.println("import java.awt.*;");
            writer.println("import javax.swing.*;");
            writer.println("");
            writer.println("import trident.*;");
            writer.println("public class Trigger extends TridEntity{");
            writer.println("    ");
            writer.println("    public Color color = Color.blue;");
            writer.println("    public Dimension box;");
            writer.println("    public int id;");
            writer.println("");
            writer.println("    private ImageIcon engineImg = new ImageIcon(\"data/images/trident/trigger.png\");");
            writer.println("    ");
            writer.println("    public Trigger(Position pos, Dimension size, int i){");
            writer.println("        super(pos);");
            writer.println("        name = \"trigger\";");
            writer.println("        box = size;");
            writer.println("        id = i;");
            writer.println("    }   ");
            writer.println("    public Trigger(){");
            writer.println("        super(\"trigger\", false, 3);");
            writer.println("    }");
            writer.println("    public TridEntity construct(Position pos, Dimension collision, int[] data){");
            writer.println("        return new Trigger(pos, new Dimension(data[0], data[1]), data[2]);");
            writer.println("    }");
            writer.println("");
            writer.println("    public boolean containsPos(Position pos){");
            writer.println("        Point p = new Point((int)pos.x, (int)pos.y);");
            writer.println("        Rectangle rect = new Rectangle((int)position.x - box.width / 2, (int)position.y - box.height / 2, box.width, box.height);");
            writer.println("        return rect.contains(p);");
            writer.println("    }");
            writer.println("");
            writer.println("    public void engineRender(Graphics g, JPanel panel, int x, int y){");
            writer.println("        g.setColor(color);");
            writer.println("        g.drawRect(x - box.width / 2, y - box.height / 2, box.width, box.height);");
            writer.println("        g.drawLine(x - box.width / 2, y - box.height / 2, x + box.width / 2, y + box.height / 2);");
            writer.println("        engineImg.paintIcon(panel, g, x - engineImg.getIconWidth() / 2, y - engineImg.getIconHeight() / 2);");
            writer.println("    }");
            writer.println("}");
            writer.close();
        }catch(Exception e){}
        
        
        
        // src/ent
        try{
            File file = new File("data/projects/" + name + "/src/ent/ExampleEntity.java");
            file.createNewFile();
            PrintWriter writer = new PrintWriter(file);
            writer.println("package ent;");
            writer.println("");
            writer.println("import blib.util.*;");
            writer.println("import trident.*;");
            writer.println("import javax.swing.*;");
            writer.println("import java.awt.*;");
            writer.println("public class ExampleEntity extends TridEntity {");
            writer.println("");
            writer.println("    // Constructor, runs when the entity is created");
            writer.println("    public ExampleEntity(Position pos){");
            writer.println("        super(pos);");
            writer.println("    }");
            writer.println("    // Registry constructor, used only for adding to the registry");
            writer.println("    public ExampleEntity(){");
            writer.println("        super(\"example\", false, 0);");
            writer.println("    }");
            writer.println("    // Custom constructor, used by the engine when building a scene");
            writer.println("    public TridEntity construct(Position pos, Dimension collision, int[] data){");
            writer.println("        return new ExampleEntity(pos);");
            writer.println("    }");
            writer.println("");
            writer.println("    // Render while in game");
            writer.println("    public void render(Graphics g, JPanel panel, int x, int y){");
            writer.println("");
            writer.println("    }");
            writer.println("");
            writer.println("    // Runs every tick while the game is running");
            writer.println("    public void update(long elapsedTime){");
            writer.println("        ");
            writer.println("    }");
            writer.println("}");
            writer.close();
        }catch(Exception e){}
        
        // src/update
        try{
            File file = new File("data/projects/" + name + "/src/update/Inputs.java");
            file.createNewFile();
            PrintWriter writer = new PrintWriter(file);
            writer.println("package update;");
            writer.println("");
            writer.println("import java.awt.*;");
            writer.println("import java.awt.event.*;");
            writer.println("import blib.util.*;");
            writer.println("");
            writer.println("import trident.*;");
            writer.println("public class Inputs {");
            writer.println("    ");
            writer.println("    public static void keyPressed(int key){");
            writer.println("        // Basic debug keys");
            writer.println("        if(key == KeyEvent.VK_F1){");
            writer.println("            Trident.drawCollision = !Trident.drawCollision;");
            writer.println("        }");
            writer.println("        if(key == KeyEvent.VK_F2){");
            writer.println("            Trident.engineDraw = !Trident.engineDraw;");
            writer.println("        }");
            writer.println("        if(key == KeyEvent.VK_F3){");
            writer.println("            Trident.drawPos = !Trident.drawPos;");
            writer.println("        }");
            writer.println("        if(key == KeyEvent.VK_F4){");
            writer.println("            Trident.noclip = !Trident.noclip;");
            writer.println("        }");
            writer.println("    }");
            writer.println("");
            writer.println("    public static void mousePressed(int mb, Point mousePos, Position worldPos){");
            writer.println("");
            writer.println("    }");
            writer.println("}");
            writer.close();
        }catch(Exception e){}        
        try{
            File file = new File("data/projects/" + name + "/src/update/Update.java");
            file.createNewFile();
            PrintWriter writer = new PrintWriter(file);
            writer.println("package update;");
            writer.println("");
            writer.println("import trident.*;");
            writer.println("import ent.*;");
            writer.println("public class Update {");
            writer.println("");
            writer.println("    public static void setup(){");
            writer.println("        // Add custom entities to the registry here. Required in order to load them properly");
            writer.println("        Trident.addCustomEntity(new ExampleEntity()); // Use the empty constructor");
            writer.println("");
            writer.println("        // Set settings");
            writer.println("        Trident.setPlrSpeed(0.2);");
            writer.println("        Trident.setShortCollision(true);");
            writer.println("    }");
            writer.println("");
            writer.println("    public static void sceneStart(String scene){");
            writer.println("");
            writer.println("    }");
            writer.println("    ");
            writer.println("    public static void update(long elapsedTimes){");
            writer.println("");
            writer.println("    }");
            writer.println("");
            writer.println("    public static void trigger(int id){");
            writer.println("        ");
            writer.println("    }");
            writer.println("}");
            writer.close();
        }catch(Exception e){}
        
        
        // data/scenes
        try{
            File file = new File("data/projects/" + name + "/data/scenes/default.bson");
            file.createNewFile();
            PrintWriter writer = new PrintWriter(file);
            writer.println("string name default");
            writer.println("string dir east");
            writer.println("{ entities");
            writer.println("string boxcoll");
            writer.println("double -200");
            writer.println("double 0");
            writer.println("boolean true");
            writer.println("int 100");
            writer.println("int 100");
            writer.println("int 0");
            writer.println("int 255");
            writer.println("int 0");
            writer.println("string plrstart");
            writer.println("double -300");
            writer.println("double 0");
            writer.println("boolean false");
            writer.println("string inviscoll");
            writer.println("double -200");
            writer.println("double 100");
            writer.println("boolean true");
            writer.println("int 100");
            writer.println("int 100");
            writer.println("string boxnocoll");
            writer.println("double -200");
            writer.println("double -100");
            writer.println("boolean false");
            writer.println("int 100");
            writer.println("int 100");
            writer.println("int 255");
            writer.println("int 0");
            writer.println("int 0");
            writer.println("}");
            writer.close();
        }catch(Exception e){}
        
        setupScenes();
        currentScene = loadedScenes.get(0);
    }

    public static void loadRegistry(){
        ArrayList<BSonObject> objects = BSonParser.readFile("data/projectRegistry.bson");
        BSonObject obj = BSonParser.getObject("projects", objects);
        BSonList asList = (BSonList)obj;
        projRegistry = new String[asList.list.size()];
        for(int i = 0; i < asList.list.size(); i++){
            projRegistry[i] = asList.list.get(i).getString();
        }
    }

    public static void saveRegistry(){
        try{
            File file = new File("data/projectRegistry.bson");
            file.createNewFile();
            PrintWriter writer = new PrintWriter(file);
            writer.println("{ projects");
            for(String s: projRegistry){
                writer.println("string " + s);
            }
            writer.println("}");
            writer.close();
        }catch(Exception e){e.printStackTrace();}
    }

    public void setupScenes(){
        try{
            loadedScenes = new ArrayList<Scene>();
            File dir = new File("data/projects/" + name + "/data/scenes");
            File[] files = dir.listFiles();
            ArrayList<File> sceneFiles = new ArrayList<File>();
            for(File f: files){
                if(BTools.hasExtension(f, "bson")) sceneFiles.add(f);
            }

            for(File f: sceneFiles){
                loadedScenes.add(new Scene(f));
            }
        }catch(Exception e){
            System.out.println("Error setting up scenes.");
            e.printStackTrace();
        }
        
    }

    public boolean loadScene(String name){
        for(Scene s: loadedScenes){
            if(s.name.equals(name)){
                currentScene = s;
                return true;
            }
        }
        System.out.println("***********************************************************************************");
        System.out.println("Error loading scene: No scene with name '" + name + "' found.");
        System.out.println("***********************************************************************************");
        return false;
    }
}
